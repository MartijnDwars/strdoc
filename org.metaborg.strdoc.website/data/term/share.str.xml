
<module>
  <name>term/share</name>
  <description><![CDATA[
                        The ATerm library preserves maximal sharing of subterms
                        through hash-consing. This sharing is not directly available
                        to the user of an ATerm. For some applications it is necessary
                        to make the implicit sharing in terms explicit in the form of
                        a let construct in which all occurences of a shared subterm
                        are replaced by a symbolic pointer (variable).
                        
                        ]]></description>
  
  
  
  <strategy>
    <name>share</name>
    <description><![CDATA[
                          The strategy share defined in this module achieves such
                          an explicit sharing for arbitrary terms. The approach used by
                          the strategy is to first turn the term into its underlying
                          graph and then inlining those subterms that are not shared
                          (only occur once) or that cannot be shared in this way (upto
                          the needs of an application).
                          
                          ]]></description>
    <start>24</start>
    <end>26</end>
    
    
  </strategy>
  
  
  <strategy>
    <name>graph</name>
    <description><![CDATA[
                          The graph of a term is obtained by turning each node
                          \verb|F(t1,...,tn)| into an edge \verb|(a, F(a1,...,an))|,
                          where \verb|a| is the address of the node and the \verb|ai|
                          are the addresses of its direct subterms. The \verb|mkvar|
                          parameter is used to embed the address in some constructor.
                          (If \verb|mkvar| is \verb|id|, nothing is done.)
                          
                          The first edge in the graph is the root of the tree. By
                          definition it is never shared. The graph can be turned into
                          one big let-expression with the root as its body. That is what
                          the first line of the definition of \verb|inline-graph|
                          accomplishes.
                          
                          Subsequently, nodes that are not shared, i.e., a pointer to
                          which only occurs once, can be inlined. Some nodes may always
                          have to be inlined (for application specific reasons). The
                          shape of such nodes is specified by the parameter
                          \verb|always|.  Edges that cannot be inlined are turned into a
                          let-binding the form of which is determined by the parameter
                          \verb|mklet|.
                          
                          After all graph edges have either been inlined or turned into
                          let-bindings the, now empty, \verb|GraphLet| is discarded and
                          replaced by its body.
                          
                          ]]></description>
    <start>60</start>
    <end>63</end>
    
    
  </strategy>
  
</module>
