
<module>
  <name>term/zip</name>
  <description><![CDATA[
                        This module contains general zipping strategies for arbitrary terms
                        and tuples.
                        
                        The zip strategy on lists takes a pair of lists and combines
                        the elements of the lists into a list of pairs. This can be
                        generalized by transforming a tuple of lists into a list of
                        tuples. This module further generalizes zip by allowing any
                        term structure instead of a list to be zipped.
                        
                        
                        
                        ]]></description>
  <author><![CDATA[Eelco Visser <visser@acm.org>]]></author>
  <author><![CDATA[Karl Trygve Kalleberg <karltk@strategoxt.org> - documentation]]></author>
  
  
  <strategy>
    <name>pair-term-zip-bu</name>
    <description><![CDATA[Zips a two-element tuple of structurally similar terms recursively by
                          using the strategy leaf to detect leaves and node to post-transform
                          the result
                          
                          Example: <term-zip(add, id)> (N(1, N(2)), N(2, N(3))) => N(3,N(5))
                          
                          
                          ]]></description>
    <start>29</start>
    <end>30</end>
    <type><![CDATA[            Tuple(a(c),a(c)) -> a(e)]]></type>
    <param><![CDATA[leaf       c -?> d]]></param>
    <param><![CDATA[node       d -> e]]></param>
  </strategy>
  
  
  <strategy>
    <name>TermZip</name>
    <description><![CDATA[Zips the argument lists of two terms of the same type, given as
                          a two element tuple, using strategy s to combine each pair.
                          
                          Example: <TermZip(id)> (Foo(1,2,3),Foo(4,5,6)) => Foo((1,4),(2,5),(3,6))
                          
                          
                          ]]></description>
    <start>44</start>
    <end>45</end>
    <type><![CDATA[s           Tuple(a,b) -> c]]></type>
    <type><![CDATA[            Tuple(a,a) -> a]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>term-zip</name>
    <description><![CDATA[Zips a tuple of structurally similar terms recursively by using the
                          strategy leaf to detect leaves and node to post-transform the result
                          
                          Example: <term-zip(add, id)> (N(1, N(2)), N(2, N(3))) => N(3,N(5))
                          
                          
                          ]]></description>
    <start>58</start>
    <end>59</end>
    <type><![CDATA[            Tuple(a(c),a(c)) -> a(e)]]></type>
    <param><![CDATA[leaf       c -?> d]]></param>
    <param><![CDATA[node       d -> e]]></param>
  </strategy>
  
  
  <strategy>
    <name>TermTupleZip</name>
    <description><![CDATA[Zips the argument lists of an arbitrary length tuple of terms of the
                          same type, using using strategy s to combine each pair. Note that
                          all terms in the tuple must use the same constructor: both the name
                          and arity must be equal.
                          
                          Example: <TermZip(id)> (Foo(1,2),Foo(4,5),Foo(6,7)) => Foo((1,4,6),(2,5,7))
                          
                          
                          ]]></description>
    <start>72</start>
    <end>75</end>
    <type><![CDATA[s           Tuple(a,b) -> c]]></type>
    <type><![CDATA[            Tuple(a,a) -> a]]></type>
    
  </strategy>
  
</module>
