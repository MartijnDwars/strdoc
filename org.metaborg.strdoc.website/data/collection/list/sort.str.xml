
<module>
  <name>collection/list/sort</name>
  <description><![CDATA[
                        This module contains strategies for sorting lists.
                        
                        qsort is the easiest strategy to use for sorting lists.
                        
                        Using SortL, LSort and sort-list, isort-list, you can
                        compose your own sorting routine.
                        
                        Additionally, LMerge can be used with sort-list and
                        isort-list to do list folding.
                        
                        ]]></description>
  
  
  
  <strategy>
    <name>SortL</name>
    <description><![CDATA[
                          Swaps the two first elements in a list if s succeeds on this pair.
                          As the swapping occurs if the predicate succeeds, lt and gt will
                          seem to have inverse semantics.
                          
                          This rule is designed to plug into sort-list and isort-list. See
                          these strategies for examples.
                          
                          Example: <SortL(gt)> [3,1,2,4] => [1,3,2,4]
                          
                          
                          ]]></description>
    <start>29</start>
    <end>31</end>
    <type><![CDATA[   List(a) -> List(a)]]></type>
    <param><![CDATA[s   a * b -> _]]></param>
  </strategy>
  
  
  <strategy>
    <name>LSort</name>
    <description><![CDATA[
                          Moves a particular element of a list to the front, determined by
                          the strategy argument s. Given the first element of the list x,
                          each succeeding element y will be compared to x using <s> (x,y).
                          The first y that makes s succeed, is moved to the front.
                          
                          Example: <LSort(gt)> [3,5,6,1] => [1,3,5,6]
                          
                          Here, 3 is compared with 5, 6, using gt, and will fail in both
                          cases. <gt> (3,1) will succeed, and 1 will be moved to the
                          front of the list.
                          
                          
                          ]]></description>
    <start>48</start>
    <end>50</end>
    <type><![CDATA[    List(a) -> List(a)]]></type>
    <param><![CDATA[s  a * b -> _]]></param>
  </strategy>
  
  
  <strategy>
    <name>LMerge</name>
    <description><![CDATA[
                          Merges the first and a particular element of the list, determined
                          by the strategy argument s. Let x be the first element of the list,
                          and y be selected in succession from the tail. s will be applied
                          to (x,y) in turn, and when it succeeds, the result will be placed
                          at the head of the list, replacing x.
                          
                          Example: LMerge(gt ; add)> [3,5,6,1] => [4,5,6]
                          
                          
                          ]]></description>
    <start>64</start>
    <end>66</end>
    <type><![CDATA[   List(a) -> List(c | a)]]></type>
    <param><![CDATA[s   a * b -> c]]></param>
  </strategy>
  
  
  <strategy>
    <name>sort-list</name>
    <description><![CDATA[
                          Sorts a list when given a suitable comparsion strategy s. The
                          strategy s should be selected from LSort, SortL and LMerge.
                          
                          Example: <sort-list(LSort(gt))> [3,5,6,1] => [1,3,5,6]
                          Example: <sort-list(LMerge(add))> [3,6,5,1] => [15]
                          
                          
                          ]]></description>
    <start>80</start>
    <end>81</end>
    <type><![CDATA[   List(a) -> List(a)]]></type>
    <param><![CDATA[s List(a) -> List(a)]]></param>
  </strategy>
  
  
  <strategy>
    <name>isort-list</name>
    <description><![CDATA[
                          Sorts a list when given a suitable comparsion strategy s. The
                          strategy s should be selected from LSort, SortL and LMerge.
                          
                          Example: <isort-list(LSort(gt))> [3,5,6,1] => [1,3,5,6]
                          Example: <isort-list(LMerge(add))> [3,6,5,1] => [15]
                          
                          
                          ]]></description>
    <start>93</start>
    <end>94</end>
    <type><![CDATA[   List(a) -> List(a)]]></type>
    <param><![CDATA[s List(a) -> List(a)]]></param>
  </strategy>
  
  
  <strategy>
    <name>jsort-list</name>
    <description><![CDATA[
                          ]]></description>
    <start>97</start>
    <end>98</end>
    
    
  </strategy>
  
  
  <strategy>
    <name>uniq</name>
    <description><![CDATA[
                          Removes duplicates from a list, returning a list of mutually unique terms.
                          
                          
                          
                          ]]></description>
    <start>107</start>
    <end>110</end>
    <type><![CDATA[List(a) -> List(a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>qsort</name>
    <description><![CDATA[
                          Sort a list using the quick-sort algorithm.
                          
                          qsort(lt) sorts a list of integers in ascending order.
                          
                          
                          ]]></description>
    <start>122</start>
    <end>125</end>
    <type><![CDATA[        List(a) -> List(a)]]></type>
    <param><![CDATA[ swap  (a, a)  -> _]]></param>
  </strategy>
  
</module>
