
<module>
  <name>collection/list/lookup</name>
  <description><![CDATA[
                        This module contains strategies for working on associative lists.
                        
                        Associative lists are on the form [(key1, value1), (key2, value2), ...]
                        Each key must be unique for the strategies in this module to operate
                        correctly. Any term can be used as key.
                        
                        The associative lists must be created correctly by the application code;
                        this module only contains strategies for searching associative lists.
                        
                        Keys may have annotations. These are considered to be part of the key,
                        so identical term with differing annotations are effectively different
                        keys.
                        
                        
                        
                        ]]></description>
  <author><![CDATA[Eelco Visser <visser@acm.org>]]></author>
  <author><![CDATA[Karl Trygve Kalleberg <karltk@strategoxt.org> - documentation]]></author>
  
  
  <strategy>
    <name>lookup</name>
    <description><![CDATA[
                          Lookup the first value associated with a key in an associative
                          list. An associative list is a list of key-value pairs.
                          
                          Note: If multiple identical keys exist, only the value for the
                          first will be retrieved.
                          
                          Example:
                          <lookup> (2, [(1, "a"), (2, "b"), (3, "c")]) => "b"
                          
                          
                          ]]></description>
    <start>36</start>
    <end>36</end>
    <type><![CDATA[ k * List(k * v) -> v]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>getfirst</name>
    <description><![CDATA[
                          Find first element of a list to which s applies.
                          The result is the application of s to this element.
                          
                          
                          ]]></description>
    <start>45</start>
    <end>45</end>
    <type><![CDATA[s    a  -> b]]></type>
    <type><![CDATA[    List(a) -> b]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>lookup'</name>
    <description><![CDATA[
                          Faster version of lookup.
                          
                          The advantage over lookup is that lookup' does not construct
                          intermediate pairs.
                          
                          
                          ]]></description>
    <start>56</start>
    <end>56</end>
    <type><![CDATA[ k * List(k * v) -> v]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>lookup</name>
    <description><![CDATA[
                          Looks up the first value associated with a particular key
                          in an associative list, using keyeq to do key comparisons.
                          
                          
                          ]]></description>
    <start>64</start>
    <end>64</end>
    <type><![CDATA[k * List(k * v) -> v]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Look1</name>
    <description><![CDATA[
                          ]]></description>
    <start>69</start>
    <end>69</end>
    
    
  </strategy>
  
  
  <strategy>
    <name>Look2</name>
    <description><![CDATA[
                          ]]></description>
    <start>72</start>
    <end>72</end>
    
    
  </strategy>
  
  
  <strategy>
    <name>Look1'</name>
    <description><![CDATA[
                          ]]></description>
    <start>75</start>
    <end>75</end>
    
    
  </strategy>
  
</module>
