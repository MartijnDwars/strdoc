
<module>
  <name>collection/tuple/common</name>
  <description><![CDATA[
                        This module contains strategies for operating on tuples.
                        
                        In Stratego, tuples are a terms, separate from lists.
                        
                        
                        
                        ]]></description>
  <author><![CDATA[Eelco Visser <visser@acm.org>]]></author>
  <author><![CDATA[Karl Trygve Kalleberg <karltk@strategoxt.org> - documentation]]></author>
  <see>collection/list/common</see>
  
  <strategy>
    <name>TupleToList</name>
    <description><![CDATA[Convert a tuple to a list.
                          
                          
                          ]]></description>
    <start>22</start>
    <end>22</end>
    <type><![CDATA[List(a) -> Tuple(a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>ListToTuple</name>
    <description><![CDATA[Convert a list to a tuple.
                          
                          
                          ]]></description>
    <start>28</start>
    <end>28</end>
    <type><![CDATA[Tuple(a) -> List(a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Fst</name>
    <description><![CDATA[Retrieve the first element of a tuple.
                          
                          
                          ]]></description>
    <start>34</start>
    <end>34</end>
    <type><![CDATA[Tuple(a, xs...) -> a]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Snd</name>
    <description><![CDATA[Retrieve the second element of a tuple.
                          
                          
                          ]]></description>
    <start>40</start>
    <end>40</end>
    <type><![CDATA[Tuple(a, b, xs...) -> b]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Third</name>
    <description><![CDATA[Retrieve the third element of a tuple.
                          
                          
                          ]]></description>
    <start>46</start>
    <end>46</end>
    <type><![CDATA[Tuple(a, b, c, xs...) -> c]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Dupl</name>
    <description><![CDATA[Duplicate a term into a two-element tuple
                          
                          
                          ]]></description>
    <start>52</start>
    <end>52</end>
    <type><![CDATA[a -> Tuple(a, a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>split</name>
    <description><![CDATA[Apply a pair of strategies, f and g, to an element.
                          
                          
                          ]]></description>
    <start>60</start>
    <end>60</end>
    <type><![CDATA[          a -> Tuple(a', b')]]></type>
    <param><![CDATA[f        a -> a']]></param>
    <param><![CDATA[g        a -> b']]></param>
  </strategy>
  
  
  <strategy>
    <name>split3</name>
    <description><![CDATA[Apply a triple of strategies, f, g and h to an element.
                          
                          
                          ]]></description>
    <start>69</start>
    <end>69</end>
    <type><![CDATA[          a -> Tuple(a', b', c')]]></type>
    <param><![CDATA[f        a -> a']]></param>
    <param><![CDATA[g        a -> b']]></param>
    <param><![CDATA[h        a -> c']]></param>
  </strategy>
  
  
  <strategy>
    <name>Swap</name>
    <description><![CDATA[Swap two elements in a tuple.
                          
                          
                          ]]></description>
    <start>75</start>
    <end>75</end>
    <type><![CDATA[Tuple(a, b) -> Tuple(b, a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Thd</name>
    <description><![CDATA[Retrieve the head of a tuple.
                          
                          
                          ]]></description>
    <start>82</start>
    <end>82</end>
    <type><![CDATA[Tuple(a) -> a]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>Ttl</name>
    <description><![CDATA[Retrieve the tail of a tuple. A new tuple with all elements except
                          the first will be returned.
                          
                          
                          ]]></description>
    <start>89</start>
    <end>89</end>
    <type><![CDATA[Tuple(a) -> Tuple(a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>tindex</name>
    <description><![CDATA[Get the nth element of a tuple. The index must be smaller than the
                          number of elements in the tuple.
                          
                          
                          ]]></description>
    <start>97</start>
    <end>98</end>
    <type><![CDATA[(Int, Tuple(a)) -> a]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>is-tuple</name>
    <description><![CDATA[Predicate that checks if the supplied term is a tuple.
                          
                          
                          ]]></description>
    <start>104</start>
    <end>105</end>
    <type><![CDATA[Tuple(a) -?> Tuple(a)]]></type>
    
  </strategy>
  
  
  <strategy>
    <name>flip</name>
    <description><![CDATA[Apply a strategy s to a swapped version of the supplied tuple.
                          The supplied tuple will be swapped, then is s applied.
                          
                          
                          ]]></description>
    <start>113</start>
    <end>113</end>
    <type><![CDATA[            Tuple(a,b) -> Tuple(b', a')]]></type>
    <param><![CDATA[s          Tuple(b,a) -> Tuple(b', a')]]></param>
  </strategy>
  
  
  <strategy>
    <name>tmap</name>
    <description><![CDATA[Apply a strategy to each element of a tuple. This strategy maps
                          a strategy s over all elements in a tuple.
                          
                          
                          ]]></description>
    <start>121</start>
    <end>122</end>
    <type><![CDATA[             Tuple(a) -> Tuple(b)]]></type>
    <param><![CDATA[s           a -> b]]></param>
  </strategy>
  
  
  <strategy>
    <name>tconcat</name>
    <description><![CDATA[Concatenate the lists in a tuple of lists, using s as the
                          concatenation strategy.
                          
                          The concatenation strategy is asked to concatenate a two-element
                          tuple of lists and produce a list. Concatenation goes from right to
                          left.
                          
                          
                          ]]></description>
    <start>134</start>
    <end>135</end>
    <type><![CDATA[            Tuple(List(a))]]></type>
    <param><![CDATA[s          Tuple(List(a), List(a)) -> List(a)]]></param>
  </strategy>
  
  
  <strategy>
    <name>tconcat'</name>
    <description><![CDATA[Concatenate the lists in a tuple of lists, using s2 as the
                          concatenation strategy and s1 as the startup strategy.
                          
                          The strategy s1 is applied once initially to an empty list, and
                          can be used to create a custom tail on the resulting list. It can
                          also be used to concatenate into non-list types.
                          
                          The concatenation strategy s2 is asked to concatenate a
                          two-element tuple of lists and produce list. Concatenation goes
                          from right to left.
                          
                          Example: <tconcat'(!0, \([a],b)-><add> (a,b)\)> ([1],[2],[3]) => 6
                          
                          
                          ]]></description>
    <start>155</start>
    <end>156</end>
    <type><![CDATA[            Tuple(List(a))]]></type>
    <param><![CDATA[s1         Nil -> b]]></param>
    <param><![CDATA[s2         Tuple(List(a), b) -> b]]></param>
  </strategy>
  
  
  <strategy>
    <name>tcata</name>
    <description><![CDATA[Apply a s1 and s2 in a catamorphic way to reduce a tuple.
                          
                          s2 must be a catamorphism, i.e. it must be able to reduce the
                          elements of the tuple from right to left.
                          
                          This strategy is also named tfoldr, as it is equivalent to a
                          right-fold on tuples.
                          
                          
                          ]]></description>
    <start>171</start>
    <end>172</end>
    <type><![CDATA[            Tuple(a) -> b]]></type>
    <param><![CDATA[s1         Nil -> b]]></param>
    <param><![CDATA[s2         Tuple(a, b) -> b]]></param>
  </strategy>
  
  
  <strategy>
    <name>tfoldr</name>
    <description><![CDATA[
                          Fold a tuple from right to left using s2 as the folding strategy.
                          s1 is used to obtain the right-element (of type b) for s2.
                          
                          
                          ]]></description>
    <start>183</start>
    <end>184</end>
    <type><![CDATA[            Tuple(a) -> b]]></type>
    <param><![CDATA[s1         Nil -> b]]></param>
    <param><![CDATA[s2         Tuple(a, b) -> b]]></param>
  </strategy>
  
  
  <strategy>
    <name>tzip</name>
    <description><![CDATA[Zip two tuples with s as the zipping strategy.
                          
                          Example: <tzip(add)> ((1,2,3),(5,4,3)) -> [6,6,6]
                          
                          
                          ]]></description>
    <start>194</start>
    <end>195</end>
    <type><![CDATA[            Tuple(Tuple(a), Tuple(b)) -> c]]></type>
    <param><![CDATA[s          Tuple(a,b) -> c]]></param>
  </strategy>
  
  
  <strategy>
    <name>tuple-zip</name>
    <description><![CDATA[
                          
                          ]]></description>
    <start>200</start>
    <end>202</end>
    
    
  </strategy>
  
  
  <strategy>
    <name>tuple-unzip</name>
    <description><![CDATA[
                          
                          ]]></description>
    <start>207</start>
    <end>209</end>
    
    
  </strategy>
  
</module>
